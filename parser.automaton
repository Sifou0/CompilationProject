State 0:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On CLASS shift to state 1
-- On prog shift to state 2
-- On list(classe) shift to state 3
-- On classe shift to state 75
-- On boption(CLASS) shift to state 77
## Reductions:
-- On OBJECT IDCLASS
--   reduce production boption(CLASS) ->
-- On LCBR
--   reduce production list(classe) ->

State 1:
## Known stack suffix:
## CLASS
## LR(1) items:
boption(CLASS) -> CLASS . [ OBJECT IDCLASS ]
## Transitions:
## Reductions:
-- On OBJECT IDCLASS
--   reduce production boption(CLASS) -> CLASS

State 2:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept prog

State 3:
## Known stack suffix:
## list(classe)
## LR(1) items:
prog -> list(classe) . block EOF [ # ]
## Transitions:
-- On LCBR shift to state 4
-- On block shift to state 73
## Reductions:

State 4:
## Known stack suffix:
## LCBR
## LR(1) items:
block -> LCBR . list(declaration) list(instruction) RCBR [ RCBR IS EOF DEF ]
## Transitions:
-- On VAR shift to state 5
-- On list(declaration) shift to state 11
-- On declaration shift to state 71
## Reductions:
-- On UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID CSTE
--   reduce production list(declaration) ->

State 5:
## Known stack suffix:
## VAR
## LR(1) items:
declaration -> VAR . boption(AUTO) ID COLON ID [ VAR UMINUS THIS SUPER STR RPAREN RETURN RESULT RCBR NEW LPAREN LCBR IS IF IDCLASS ID EXTENDS DEF CSTE ]
## Transitions:
-- On AUTO shift to state 6
-- On boption(AUTO) shift to state 7
## Reductions:
-- On ID
--   reduce production boption(AUTO) ->

State 6:
## Known stack suffix:
## AUTO
## LR(1) items:
boption(AUTO) -> AUTO . [ ID ]
## Transitions:
## Reductions:
-- On ID
--   reduce production boption(AUTO) -> AUTO

State 7:
## Known stack suffix:
## VAR boption(AUTO)
## LR(1) items:
declaration -> VAR boption(AUTO) . ID COLON ID [ VAR UMINUS THIS SUPER STR RPAREN RETURN RESULT RCBR NEW LPAREN LCBR IS IF IDCLASS ID EXTENDS DEF CSTE ]
## Transitions:
-- On ID shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## VAR boption(AUTO) ID
## LR(1) items:
declaration -> VAR boption(AUTO) ID . COLON ID [ VAR UMINUS THIS SUPER STR RPAREN RETURN RESULT RCBR NEW LPAREN LCBR IS IF IDCLASS ID EXTENDS DEF CSTE ]
## Transitions:
-- On COLON shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## VAR boption(AUTO) ID COLON
## LR(1) items:
declaration -> VAR boption(AUTO) ID COLON . ID [ VAR UMINUS THIS SUPER STR RPAREN RETURN RESULT RCBR NEW LPAREN LCBR IS IF IDCLASS ID EXTENDS DEF CSTE ]
## Transitions:
-- On ID shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## VAR boption(AUTO) ID COLON ID
## LR(1) items:
declaration -> VAR boption(AUTO) ID COLON ID . [ VAR UMINUS THIS SUPER STR RPAREN RETURN RESULT RCBR NEW LPAREN LCBR IS IF IDCLASS ID EXTENDS DEF CSTE ]
## Transitions:
## Reductions:
-- On VAR UMINUS THIS SUPER STR RPAREN RETURN RESULT RCBR NEW LPAREN LCBR IS IF IDCLASS ID EXTENDS DEF CSTE
--   reduce production declaration -> VAR boption(AUTO) ID COLON ID

State 11:
## Known stack suffix:
## LCBR list(declaration)
## LR(1) items:
block -> LCBR list(declaration) . list(instruction) RCBR [ RCBR IS EOF DEF ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RETURN shift to state 55
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IF shift to state 56
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On list(instruction) shift to state 67
-- On instruction shift to state 69
-- On ident shift to state 62
-- On expression shift to state 65
## Reductions:
-- On RCBR
--   reduce production list(instruction) ->

State 12:
## Known stack suffix:
## UMINUS
## LR(1) items:
expression -> UMINUS . expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On ident shift to state 27
-- On expression shift to state 54
## Reductions:

State 13:
## Known stack suffix:
## THIS
## LR(1) items:
ident -> THIS . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN
--   reduce production ident -> THIS

State 14:
## Known stack suffix:
## SUPER
## LR(1) items:
ident -> SUPER . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN
--   reduce production ident -> SUPER

State 15:
## Known stack suffix:
## STR
## LR(1) items:
expression -> STR . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE
--   reduce production expression -> STR

State 16:
## Known stack suffix:
## RESULT
## LR(1) items:
ident -> RESULT . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN
--   reduce production ident -> RESULT

State 17:
## Known stack suffix:
## NEW
## LR(1) items:
expression -> NEW . IDCLASS LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On IDCLASS shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## NEW IDCLASS
## LR(1) items:
expression -> NEW IDCLASS . LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On LPAREN shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## NEW IDCLASS LPAREN
## LR(1) items:
expression -> NEW IDCLASS LPAREN . list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On list(expression) shift to state 52
-- On ident shift to state 27
-- On expression shift to state 28
## Reductions:
-- On RPAREN
--   reduce production list(expression) ->

State 20:
## Known stack suffix:
## LPAREN
## LR(1) items:
expression -> LPAREN . ID expression RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> LPAREN . expression RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IDCLASS shift to state 21
-- On ID shift to state 47
-- On CSTE shift to state 24
-- On ident shift to state 27
-- On expression shift to state 50
## Reductions:

State 21:
## Known stack suffix:
## IDCLASS
## LR(1) items:
expression -> IDCLASS . LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On LPAREN shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## IDCLASS LPAREN
## LR(1) items:
expression -> IDCLASS LPAREN . list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On list(expression) shift to state 25
-- On ident shift to state 27
-- On expression shift to state 28
## Reductions:
-- On RPAREN
--   reduce production list(expression) ->

State 23:
## Known stack suffix:
## ID
## LR(1) items:
ident -> ID . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN
--   reduce production ident -> ID

State 24:
## Known stack suffix:
## CSTE
## LR(1) items:
expression -> CSTE . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE
--   reduce production expression -> CSTE

State 25:
## Known stack suffix:
## IDCLASS LPAREN list(expression)
## LR(1) items:
expression -> IDCLASS LPAREN list(expression) . RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On RPAREN shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## IDCLASS LPAREN list(expression) RPAREN
## LR(1) items:
expression -> IDCLASS LPAREN list(expression) RPAREN . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE
--   reduce production expression -> IDCLASS LPAREN list(expression) RPAREN

State 27:
## Known stack suffix:
## ident
## LR(1) items:
expression -> ident . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE
--   reduce production expression -> ident

State 28:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS SUPER STR RPAREN RESULT RELOP PLUS NEW MINUS LPAREN IDCLASS ID DOT DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS SUPER STR RPAREN RESULT RELOP PLUS NEW MINUS LPAREN IDCLASS ID DOT DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS SUPER STR RPAREN RESULT RELOP PLUS NEW MINUS LPAREN IDCLASS ID DOT DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS SUPER STR RPAREN RESULT RELOP PLUS NEW MINUS LPAREN IDCLASS ID DOT DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS SUPER STR RPAREN RESULT RELOP PLUS NEW MINUS LPAREN IDCLASS ID DOT DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS SUPER STR RPAREN RESULT RELOP PLUS NEW MINUS LPAREN IDCLASS ID DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident [ UMINUS TIMES THIS SUPER STR RPAREN RESULT RELOP PLUS NEW MINUS LPAREN IDCLASS ID DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident LPAREN list(expression) RPAREN [ UMINUS TIMES THIS SUPER STR RPAREN RESULT RELOP PLUS NEW MINUS LPAREN IDCLASS ID DOT DIV CSTE CONCATE ]
list(expression) -> expression . list(expression) [ RPAREN ]
## Transitions:
-- On UMINUS shift to state 12
-- On TIMES shift to state 29
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RESULT shift to state 16
-- On RELOP shift to state 31
-- On PLUS shift to state 40
-- On NEW shift to state 17
-- On MINUS shift to state 44
-- On LPAREN shift to state 20
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On DOT shift to state 33
-- On DIV shift to state 42
-- On CSTE shift to state 24
-- On CONCATE shift to state 38
-- On list(expression) shift to state 46
-- On ident shift to state 27
-- On expression shift to state 28
## Reductions:
-- On RPAREN
--   reduce production list(expression) ->

State 29:
## Known stack suffix:
## expression TIMES
## LR(1) items:
expression -> expression TIMES . expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On ident shift to state 27
-- On expression shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## expression TIMES expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression TIMES expression . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On RELOP shift to state 31
-- On DOT shift to state 33
-- On CONCATE shift to state 38
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DIV CSTE
--   reduce production expression -> expression TIMES expression

State 31:
## Known stack suffix:
## expression RELOP
## LR(1) items:
expression -> expression RELOP . expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On ident shift to state 27
-- On expression shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## expression RELOP expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression RELOP expression . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On DOT shift to state 33
-- On CONCATE shift to state 38
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DIV CSTE
--   reduce production expression -> expression RELOP expression

State 33:
## Known stack suffix:
## expression DOT
## LR(1) items:
expression -> expression DOT . ident [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression DOT . ident LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On RESULT shift to state 16
-- On ID shift to state 23
-- On ident shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## expression DOT ident
## LR(1) items:
expression -> expression DOT ident . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression DOT ident . LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On LPAREN shift to state 35
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS IF IDCLASS ID ELSE DOT DIV CSTE CONCATE
--   reduce production expression -> expression DOT ident

State 35:
## Known stack suffix:
## expression DOT ident LPAREN
## LR(1) items:
expression -> expression DOT ident LPAREN . list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On list(expression) shift to state 36
-- On ident shift to state 27
-- On expression shift to state 28
## Reductions:
-- On RPAREN
--   reduce production list(expression) ->

State 36:
## Known stack suffix:
## expression DOT ident LPAREN list(expression)
## LR(1) items:
expression -> expression DOT ident LPAREN list(expression) . RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On RPAREN shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## expression DOT ident LPAREN list(expression) RPAREN
## LR(1) items:
expression -> expression DOT ident LPAREN list(expression) RPAREN . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE
--   reduce production expression -> expression DOT ident LPAREN list(expression) RPAREN

State 38:
## Known stack suffix:
## expression CONCATE
## LR(1) items:
expression -> expression CONCATE . expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On ident shift to state 27
-- On expression shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## expression CONCATE expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression CONCATE expression . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE
--   reduce production expression -> expression CONCATE expression

State 40:
## Known stack suffix:
## expression PLUS
## LR(1) items:
expression -> expression PLUS . expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On ident shift to state 27
-- On expression shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression PLUS expression . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On TIMES shift to state 29
-- On RELOP shift to state 31
-- On DOT shift to state 33
-- On DIV shift to state 42
-- On CONCATE shift to state 38
## Reductions:
-- On UMINUS THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE CSTE
--   reduce production expression -> expression PLUS expression

State 42:
## Known stack suffix:
## expression DIV
## LR(1) items:
expression -> expression DIV . expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On ident shift to state 27
-- On expression shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## expression DIV expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression DIV expression . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On RELOP shift to state 31
-- On DOT shift to state 33
-- On CONCATE shift to state 38
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DIV CSTE
--   reduce production expression -> expression DIV expression

State 44:
## Known stack suffix:
## expression MINUS
## LR(1) items:
expression -> expression MINUS . expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On ident shift to state 27
-- On expression shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## expression MINUS expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression MINUS expression . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On TIMES shift to state 29
-- On RELOP shift to state 31
-- On DOT shift to state 33
-- On DIV shift to state 42
-- On CONCATE shift to state 38
## Reductions:
-- On UMINUS THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE CSTE
--   reduce production expression -> expression MINUS expression

State 46:
## Known stack suffix:
## expression list(expression)
## LR(1) items:
list(expression) -> expression list(expression) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production list(expression) -> expression list(expression)

State 47:
## Known stack suffix:
## LPAREN ID
## LR(1) items:
expression -> LPAREN ID . expression RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
ident -> ID . [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On ident shift to state 27
-- On expression shift to state 48
## Reductions:
-- On TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE
--   reduce production ident -> ID

State 48:
## Known stack suffix:
## LPAREN ID expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . MINUS expression [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . TIMES expression [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . DIV expression [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . CONCATE expression [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> LPAREN ID expression . RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . DOT ident [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . DOT ident LPAREN list(expression) RPAREN [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
## Transitions:
-- On TIMES shift to state 29
-- On RPAREN shift to state 49
-- On RELOP shift to state 31
-- On PLUS shift to state 40
-- On MINUS shift to state 44
-- On DOT shift to state 33
-- On DIV shift to state 42
-- On CONCATE shift to state 38
## Reductions:

State 49:
## Known stack suffix:
## LPAREN ID expression RPAREN
## LR(1) items:
expression -> LPAREN ID expression RPAREN . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE
--   reduce production expression -> LPAREN ID expression RPAREN

State 50:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . MINUS expression [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . TIMES expression [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . DIV expression [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . CONCATE expression [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> LPAREN expression . RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . DOT ident [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . DOT ident LPAREN list(expression) RPAREN [ TIMES RPAREN RELOP PLUS MINUS DOT DIV CONCATE ]
## Transitions:
-- On TIMES shift to state 29
-- On RPAREN shift to state 51
-- On RELOP shift to state 31
-- On PLUS shift to state 40
-- On MINUS shift to state 44
-- On DOT shift to state 33
-- On DIV shift to state 42
-- On CONCATE shift to state 38
## Reductions:

State 51:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
expression -> LPAREN expression RPAREN . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE
--   reduce production expression -> LPAREN expression RPAREN

State 52:
## Known stack suffix:
## NEW IDCLASS LPAREN list(expression)
## LR(1) items:
expression -> NEW IDCLASS LPAREN list(expression) . RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
-- On RPAREN shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## NEW IDCLASS LPAREN list(expression) RPAREN
## LR(1) items:
expression -> NEW IDCLASS LPAREN list(expression) RPAREN . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE
--   reduce production expression -> NEW IDCLASS LPAREN list(expression) RPAREN

State 54:
## Known stack suffix:
## UMINUS expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> UMINUS expression . [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER STR SEMICOLON RPAREN RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE
--   reduce production expression -> UMINUS expression

State 55:
## Known stack suffix:
## RETURN
## LR(1) items:
instruction -> RETURN . [ UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
## Reductions:
-- On UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE
--   reduce production instruction -> RETURN

State 56:
## Known stack suffix:
## IF
## LR(1) items:
instruction -> IF . expression THEN instruction ELSE instruction [ UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On ident shift to state 27
-- On expression shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## IF expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES THEN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . MINUS expression [ TIMES THEN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . TIMES expression [ TIMES THEN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . DIV expression [ TIMES THEN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . CONCATE expression [ TIMES THEN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . RELOP expression [ TIMES THEN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . DOT ident [ TIMES THEN RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . DOT ident LPAREN list(expression) RPAREN [ TIMES THEN RELOP PLUS MINUS DOT DIV CONCATE ]
instruction -> IF expression . THEN instruction ELSE instruction [ UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On TIMES shift to state 29
-- On THEN shift to state 58
-- On RELOP shift to state 31
-- On PLUS shift to state 40
-- On MINUS shift to state 44
-- On DOT shift to state 33
-- On DIV shift to state 42
-- On CONCATE shift to state 38
## Reductions:

State 58:
## Known stack suffix:
## IF expression THEN
## LR(1) items:
instruction -> IF expression THEN . instruction ELSE instruction [ UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RETURN shift to state 55
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IF shift to state 56
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On instruction shift to state 59
-- On ident shift to state 62
-- On expression shift to state 65
## Reductions:

State 59:
## Known stack suffix:
## IF expression THEN instruction
## LR(1) items:
instruction -> IF expression THEN instruction . ELSE instruction [ UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On ELSE shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## IF expression THEN instruction ELSE
## LR(1) items:
instruction -> IF expression THEN instruction ELSE . instruction [ UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RETURN shift to state 55
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IF shift to state 56
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On instruction shift to state 61
-- On ident shift to state 62
-- On expression shift to state 65
## Reductions:

State 61:
## Known stack suffix:
## IF expression THEN instruction ELSE instruction
## LR(1) items:
instruction -> IF expression THEN instruction ELSE instruction . [ UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
## Reductions:
-- On UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE
--   reduce production instruction -> IF expression THEN instruction ELSE instruction

State 62:
## Known stack suffix:
## ident
## LR(1) items:
expression -> ident . [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV CONCATE ]
instruction -> ident . ASSIGN expression [ UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On ASSIGN shift to state 63
## Reductions:
-- On TIMES SEMICOLON RELOP PLUS MINUS DOT DIV CONCATE
--   reduce production expression -> ident

State 63:
## Known stack suffix:
## ident ASSIGN
## LR(1) items:
instruction -> ident ASSIGN . expression [ UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On ident shift to state 27
-- On expression shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## ident ASSIGN expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS SUPER STR RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS SUPER STR RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS SUPER STR RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS SUPER STR RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS SUPER STR RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS SUPER STR RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident [ UMINUS TIMES THIS SUPER STR RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
expression -> expression . DOT ident LPAREN list(expression) RPAREN [ UMINUS TIMES THIS SUPER STR RETURN RESULT RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ]
instruction -> ident ASSIGN expression . [ UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On TIMES shift to state 29
-- On RELOP shift to state 31
-- On PLUS shift to state 40
-- On MINUS shift to state 44
-- On DOT shift to state 33
-- On DIV shift to state 42
-- On CONCATE shift to state 38
## Reductions:
-- On UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE
--   reduce production instruction -> ident ASSIGN expression

State 65:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . MINUS expression [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . TIMES expression [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . DIV expression [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . CONCATE expression [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . RELOP expression [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . DOT ident [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV CONCATE ]
expression -> expression . DOT ident LPAREN list(expression) RPAREN [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV CONCATE ]
instruction -> expression . SEMICOLON [ UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On TIMES shift to state 29
-- On SEMICOLON shift to state 66
-- On RELOP shift to state 31
-- On PLUS shift to state 40
-- On MINUS shift to state 44
-- On DOT shift to state 33
-- On DIV shift to state 42
-- On CONCATE shift to state 38
## Reductions:

State 66:
## Known stack suffix:
## expression SEMICOLON
## LR(1) items:
instruction -> expression SEMICOLON . [ UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
## Reductions:
-- On UMINUS THIS SUPER STR RETURN RESULT RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE
--   reduce production instruction -> expression SEMICOLON

State 67:
## Known stack suffix:
## LCBR list(declaration) list(instruction)
## LR(1) items:
block -> LCBR list(declaration) list(instruction) . RCBR [ RCBR IS EOF DEF ]
## Transitions:
-- On RCBR shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## LCBR list(declaration) list(instruction) RCBR
## LR(1) items:
block -> LCBR list(declaration) list(instruction) RCBR . [ RCBR IS EOF DEF ]
## Transitions:
## Reductions:
-- On RCBR IS EOF DEF
--   reduce production block -> LCBR list(declaration) list(instruction) RCBR

State 69:
## Known stack suffix:
## instruction
## LR(1) items:
list(instruction) -> instruction . list(instruction) [ RCBR ]
## Transitions:
-- On UMINUS shift to state 12
-- On THIS shift to state 13
-- On SUPER shift to state 14
-- On STR shift to state 15
-- On RETURN shift to state 55
-- On RESULT shift to state 16
-- On NEW shift to state 17
-- On LPAREN shift to state 20
-- On IF shift to state 56
-- On IDCLASS shift to state 21
-- On ID shift to state 23
-- On CSTE shift to state 24
-- On list(instruction) shift to state 70
-- On instruction shift to state 69
-- On ident shift to state 62
-- On expression shift to state 65
## Reductions:
-- On RCBR
--   reduce production list(instruction) ->

State 70:
## Known stack suffix:
## instruction list(instruction)
## LR(1) items:
list(instruction) -> instruction list(instruction) . [ RCBR ]
## Transitions:
## Reductions:
-- On RCBR
--   reduce production list(instruction) -> instruction list(instruction)

State 71:
## Known stack suffix:
## declaration
## LR(1) items:
list(declaration) -> declaration . list(declaration) [ UMINUS THIS SUPER STR RPAREN RETURN RESULT RCBR NEW LPAREN LCBR IS IF IDCLASS ID EXTENDS DEF CSTE ]
## Transitions:
-- On VAR shift to state 5
-- On list(declaration) shift to state 72
-- On declaration shift to state 71
## Reductions:
-- On UMINUS THIS SUPER STR RPAREN RETURN RESULT RCBR NEW LPAREN LCBR IS IF IDCLASS ID EXTENDS DEF CSTE
--   reduce production list(declaration) ->

State 72:
## Known stack suffix:
## declaration list(declaration)
## LR(1) items:
list(declaration) -> declaration list(declaration) . [ UMINUS THIS SUPER STR RPAREN RETURN RESULT RCBR NEW LPAREN LCBR IS IF IDCLASS ID EXTENDS DEF CSTE ]
## Transitions:
## Reductions:
-- On UMINUS THIS SUPER STR RPAREN RETURN RESULT RCBR NEW LPAREN LCBR IS IF IDCLASS ID EXTENDS DEF CSTE
--   reduce production list(declaration) -> declaration list(declaration)

State 73:
## Known stack suffix:
## list(classe) block
## LR(1) items:
prog -> list(classe) block . EOF [ # ]
## Transitions:
-- On EOF shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## list(classe) block EOF
## LR(1) items:
prog -> list(classe) block EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prog -> list(classe) block EOF

State 75:
## Known stack suffix:
## classe
## LR(1) items:
list(classe) -> classe . list(classe) [ LCBR ]
## Transitions:
-- On CLASS shift to state 1
-- On list(classe) shift to state 76
-- On classe shift to state 75
-- On boption(CLASS) shift to state 77
## Reductions:
-- On OBJECT IDCLASS
--   reduce production boption(CLASS) ->
-- On LCBR
--   reduce production list(classe) ->

State 76:
## Known stack suffix:
## classe list(classe)
## LR(1) items:
list(classe) -> classe list(classe) . [ LCBR ]
## Transitions:
## Reductions:
-- On LCBR
--   reduce production list(classe) -> classe list(classe)

State 77:
## Known stack suffix:
## boption(CLASS)
## LR(1) items:
classe -> boption(CLASS) . boption(OBJECT) IDCLASS LPAREN list(declaration) option(extends) option(block) IS block_class [ OBJECT LCBR IDCLASS CLASS ]
## Transitions:
-- On OBJECT shift to state 78
-- On boption(OBJECT) shift to state 79
## Reductions:
-- On IDCLASS
--   reduce production boption(OBJECT) ->

State 78:
## Known stack suffix:
## OBJECT
## LR(1) items:
boption(OBJECT) -> OBJECT . [ IDCLASS ]
## Transitions:
## Reductions:
-- On IDCLASS
--   reduce production boption(OBJECT) -> OBJECT

State 79:
## Known stack suffix:
## boption(CLASS) boption(OBJECT)
## LR(1) items:
classe -> boption(CLASS) boption(OBJECT) . IDCLASS LPAREN list(declaration) option(extends) option(block) IS block_class [ OBJECT LCBR IDCLASS CLASS ]
## Transitions:
-- On IDCLASS shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## boption(CLASS) boption(OBJECT) IDCLASS
## LR(1) items:
classe -> boption(CLASS) boption(OBJECT) IDCLASS . LPAREN list(declaration) option(extends) option(block) IS block_class [ OBJECT LCBR IDCLASS CLASS ]
## Transitions:
-- On LPAREN shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## boption(CLASS) boption(OBJECT) IDCLASS LPAREN
## LR(1) items:
classe -> boption(CLASS) boption(OBJECT) IDCLASS LPAREN . list(declaration) option(extends) option(block) IS block_class [ OBJECT LCBR IDCLASS CLASS ]
## Transitions:
-- On VAR shift to state 5
-- On list(declaration) shift to state 82
-- On declaration shift to state 71
## Reductions:
-- On LCBR IS EXTENDS
--   reduce production list(declaration) ->

State 82:
## Known stack suffix:
## boption(CLASS) boption(OBJECT) IDCLASS LPAREN list(declaration)
## LR(1) items:
classe -> boption(CLASS) boption(OBJECT) IDCLASS LPAREN list(declaration) . option(extends) option(block) IS block_class [ OBJECT LCBR IDCLASS CLASS ]
## Transitions:
-- On EXTENDS shift to state 83
-- On option(extends) shift to state 85
-- On extends shift to state 111
## Reductions:
-- On LCBR IS
--   reduce production option(extends) ->

State 83:
## Known stack suffix:
## EXTENDS
## LR(1) items:
extends -> EXTENDS . IDCLASS [ LCBR IS ]
## Transitions:
-- On IDCLASS shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## EXTENDS IDCLASS
## LR(1) items:
extends -> EXTENDS IDCLASS . [ LCBR IS ]
## Transitions:
## Reductions:
-- On LCBR IS
--   reduce production extends -> EXTENDS IDCLASS

State 85:
## Known stack suffix:
## boption(CLASS) boption(OBJECT) IDCLASS LPAREN list(declaration) option(extends)
## LR(1) items:
classe -> boption(CLASS) boption(OBJECT) IDCLASS LPAREN list(declaration) option(extends) . option(block) IS block_class [ OBJECT LCBR IDCLASS CLASS ]
## Transitions:
-- On LCBR shift to state 4
-- On option(block) shift to state 86
-- On block shift to state 110
## Reductions:
-- On IS
--   reduce production option(block) ->

State 86:
## Known stack suffix:
## boption(CLASS) boption(OBJECT) IDCLASS LPAREN list(declaration) option(extends) option(block)
## LR(1) items:
classe -> boption(CLASS) boption(OBJECT) IDCLASS LPAREN list(declaration) option(extends) option(block) . IS block_class [ OBJECT LCBR IDCLASS CLASS ]
## Transitions:
-- On IS shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## boption(CLASS) boption(OBJECT) IDCLASS LPAREN list(declaration) option(extends) option(block) IS
## LR(1) items:
classe -> boption(CLASS) boption(OBJECT) IDCLASS LPAREN list(declaration) option(extends) option(block) IS . block_class [ OBJECT LCBR IDCLASS CLASS ]
## Transitions:
-- On LCBR shift to state 88
-- On block_class shift to state 109
## Reductions:

State 88:
## Known stack suffix:
## LCBR
## LR(1) items:
block_class -> LCBR . list(declaration) list(methode) RCBR [ OBJECT LCBR IDCLASS CLASS ]
## Transitions:
-- On VAR shift to state 5
-- On list(declaration) shift to state 89
-- On declaration shift to state 71
## Reductions:
-- On RCBR DEF
--   reduce production list(declaration) ->

State 89:
## Known stack suffix:
## LCBR list(declaration)
## LR(1) items:
block_class -> LCBR list(declaration) . list(methode) RCBR [ OBJECT LCBR IDCLASS CLASS ]
## Transitions:
-- On DEF shift to state 90
-- On methode shift to state 105
-- On list(methode) shift to state 107
## Reductions:
-- On RCBR
--   reduce production list(methode) ->

State 90:
## Known stack suffix:
## DEF
## LR(1) items:
methode -> DEF . boption(OVERRIDE) ID LPAREN list(declaration) RPAREN option(returned_type) IS block [ RCBR DEF ]
methode -> DEF . boption(OVERRIDE) ID LPAREN list(declaration) RPAREN returned_type ASSIGN block [ RCBR DEF ]
## Transitions:
-- On OVERRIDE shift to state 91
-- On boption(OVERRIDE) shift to state 92
## Reductions:
-- On ID
--   reduce production boption(OVERRIDE) ->

State 91:
## Known stack suffix:
## OVERRIDE
## LR(1) items:
boption(OVERRIDE) -> OVERRIDE . [ ID ]
## Transitions:
## Reductions:
-- On ID
--   reduce production boption(OVERRIDE) -> OVERRIDE

State 92:
## Known stack suffix:
## DEF boption(OVERRIDE)
## LR(1) items:
methode -> DEF boption(OVERRIDE) . ID LPAREN list(declaration) RPAREN option(returned_type) IS block [ RCBR DEF ]
methode -> DEF boption(OVERRIDE) . ID LPAREN list(declaration) RPAREN returned_type ASSIGN block [ RCBR DEF ]
## Transitions:
-- On ID shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## DEF boption(OVERRIDE) ID
## LR(1) items:
methode -> DEF boption(OVERRIDE) ID . LPAREN list(declaration) RPAREN option(returned_type) IS block [ RCBR DEF ]
methode -> DEF boption(OVERRIDE) ID . LPAREN list(declaration) RPAREN returned_type ASSIGN block [ RCBR DEF ]
## Transitions:
-- On LPAREN shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## DEF boption(OVERRIDE) ID LPAREN
## LR(1) items:
methode -> DEF boption(OVERRIDE) ID LPAREN . list(declaration) RPAREN option(returned_type) IS block [ RCBR DEF ]
methode -> DEF boption(OVERRIDE) ID LPAREN . list(declaration) RPAREN returned_type ASSIGN block [ RCBR DEF ]
## Transitions:
-- On VAR shift to state 5
-- On list(declaration) shift to state 95
-- On declaration shift to state 71
## Reductions:
-- On RPAREN
--   reduce production list(declaration) ->

State 95:
## Known stack suffix:
## DEF boption(OVERRIDE) ID LPAREN list(declaration)
## LR(1) items:
methode -> DEF boption(OVERRIDE) ID LPAREN list(declaration) . RPAREN option(returned_type) IS block [ RCBR DEF ]
methode -> DEF boption(OVERRIDE) ID LPAREN list(declaration) . RPAREN returned_type ASSIGN block [ RCBR DEF ]
## Transitions:
-- On RPAREN shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN
## LR(1) items:
methode -> DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN . option(returned_type) IS block [ RCBR DEF ]
methode -> DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN . returned_type ASSIGN block [ RCBR DEF ]
## Transitions:
-- On COLON shift to state 97
-- On returned_type shift to state 99
-- On option(returned_type) shift to state 102
## Reductions:
-- On IS
--   reduce production option(returned_type) ->

State 97:
## Known stack suffix:
## COLON
## LR(1) items:
returned_type -> COLON . IDCLASS [ IS ASSIGN ]
## Transitions:
-- On IDCLASS shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## COLON IDCLASS
## LR(1) items:
returned_type -> COLON IDCLASS . [ IS ASSIGN ]
## Transitions:
## Reductions:
-- On IS ASSIGN
--   reduce production returned_type -> COLON IDCLASS

State 99:
## Known stack suffix:
## DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN returned_type
## LR(1) items:
methode -> DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN returned_type . ASSIGN block [ RCBR DEF ]
option(returned_type) -> returned_type . [ IS ]
## Transitions:
-- On ASSIGN shift to state 100
## Reductions:
-- On IS
--   reduce production option(returned_type) -> returned_type

State 100:
## Known stack suffix:
## DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN returned_type ASSIGN
## LR(1) items:
methode -> DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN returned_type ASSIGN . block [ RCBR DEF ]
## Transitions:
-- On LCBR shift to state 4
-- On block shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN returned_type ASSIGN block
## LR(1) items:
methode -> DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN returned_type ASSIGN block . [ RCBR DEF ]
## Transitions:
## Reductions:
-- On RCBR DEF
--   reduce production methode -> DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN returned_type ASSIGN block

State 102:
## Known stack suffix:
## DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN option(returned_type)
## LR(1) items:
methode -> DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN option(returned_type) . IS block [ RCBR DEF ]
## Transitions:
-- On IS shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN option(returned_type) IS
## LR(1) items:
methode -> DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN option(returned_type) IS . block [ RCBR DEF ]
## Transitions:
-- On LCBR shift to state 4
-- On block shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN option(returned_type) IS block
## LR(1) items:
methode -> DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN option(returned_type) IS block . [ RCBR DEF ]
## Transitions:
## Reductions:
-- On RCBR DEF
--   reduce production methode -> DEF boption(OVERRIDE) ID LPAREN list(declaration) RPAREN option(returned_type) IS block

State 105:
## Known stack suffix:
## methode
## LR(1) items:
list(methode) -> methode . list(methode) [ RCBR ]
## Transitions:
-- On DEF shift to state 90
-- On methode shift to state 105
-- On list(methode) shift to state 106
## Reductions:
-- On RCBR
--   reduce production list(methode) ->

State 106:
## Known stack suffix:
## methode list(methode)
## LR(1) items:
list(methode) -> methode list(methode) . [ RCBR ]
## Transitions:
## Reductions:
-- On RCBR
--   reduce production list(methode) -> methode list(methode)

State 107:
## Known stack suffix:
## LCBR list(declaration) list(methode)
## LR(1) items:
block_class -> LCBR list(declaration) list(methode) . RCBR [ OBJECT LCBR IDCLASS CLASS ]
## Transitions:
-- On RCBR shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## LCBR list(declaration) list(methode) RCBR
## LR(1) items:
block_class -> LCBR list(declaration) list(methode) RCBR . [ OBJECT LCBR IDCLASS CLASS ]
## Transitions:
## Reductions:
-- On OBJECT LCBR IDCLASS CLASS
--   reduce production block_class -> LCBR list(declaration) list(methode) RCBR

State 109:
## Known stack suffix:
## boption(CLASS) boption(OBJECT) IDCLASS LPAREN list(declaration) option(extends) option(block) IS block_class
## LR(1) items:
classe -> boption(CLASS) boption(OBJECT) IDCLASS LPAREN list(declaration) option(extends) option(block) IS block_class . [ OBJECT LCBR IDCLASS CLASS ]
## Transitions:
## Reductions:
-- On OBJECT LCBR IDCLASS CLASS
--   reduce production classe -> boption(CLASS) boption(OBJECT) IDCLASS LPAREN list(declaration) option(extends) option(block) IS block_class

State 110:
## Known stack suffix:
## block
## LR(1) items:
option(block) -> block . [ IS ]
## Transitions:
## Reductions:
-- On IS
--   reduce production option(block) -> block

State 111:
## Known stack suffix:
## extends
## LR(1) items:
option(extends) -> extends . [ LCBR IS ]
## Transitions:
## Reductions:
-- On LCBR IS
--   reduce production option(extends) -> extends

