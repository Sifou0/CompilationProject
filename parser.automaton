State 0:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On CLASS shift to state 1
-- On prog shift to state 93
-- On list(classe) shift to state 94
-- On classe shift to state 97
## Reductions:
-- On LCBR
--   reduce production list(classe) ->

State 1:
## Known stack suffix:
## CLASS
## LR(1) items:
classe -> CLASS . ID LPAREN list(declaration) RPAREN IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS . ID LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS . ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS . ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On ID shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## CLASS ID
## LR(1) items:
classe -> CLASS ID . LPAREN list(declaration) RPAREN IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS ID . LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS ID . LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS ID . LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LPAREN shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## CLASS ID LPAREN
## LR(1) items:
classe -> CLASS ID LPAREN . list(declaration) RPAREN IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS ID LPAREN . list(declaration) RPAREN EXTENDS expression IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS ID LPAREN . list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS ID LPAREN . list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On VAR shift to state 4
-- On list(declaration) shift to state 8
-- On declaration shift to state 67
## Reductions:
-- On RPAREN
--   reduce production list(declaration) ->

State 4:
## Known stack suffix:
## VAR
## LR(1) items:
declaration -> VAR . ID COLON ID [ VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF ID CSTE ]
## Transitions:
-- On ID shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## VAR ID
## LR(1) items:
declaration -> VAR ID . COLON ID [ VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF ID CSTE ]
## Transitions:
-- On COLON shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## VAR ID COLON
## LR(1) items:
declaration -> VAR ID COLON . ID [ VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF ID CSTE ]
## Transitions:
-- On ID shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## VAR ID COLON ID
## LR(1) items:
declaration -> VAR ID COLON ID . [ VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF ID CSTE ]
## Transitions:
## Reductions:
-- On VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF ID CSTE
--   reduce production declaration -> VAR ID COLON ID

State 8:
## Known stack suffix:
## CLASS ID LPAREN list(declaration)
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) . RPAREN IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS ID LPAREN list(declaration) . RPAREN EXTENDS expression IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS ID LPAREN list(declaration) . RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS ID LPAREN list(declaration) . RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RPAREN shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN . IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS ID LPAREN list(declaration) RPAREN . EXTENDS expression IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS ID LPAREN list(declaration) RPAREN . EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS ID LPAREN list(declaration) RPAREN . LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LPAREN shift to state 10
-- On IS shift to state 75
-- On EXTENDS shift to state 79
## Reductions:

State 10:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN LPAREN
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN LPAREN . RPAREN LBRACKET block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RPAREN shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN . LBRACKET block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LBRACKET shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET . block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LCBR shift to state 13
-- On block shift to state 69
## Reductions:

State 13:
## Known stack suffix:
## LCBR
## LR(1) items:
block -> LCBR . list(declaration) list(instruction) RCBR [ RBRACKET EOF ]
## Transitions:
-- On VAR shift to state 4
-- On list(declaration) shift to state 14
-- On declaration shift to state 67
## Reductions:
-- On UMINUS THIS SUPER RCBR NEW LPAREN IF ID CSTE
--   reduce production list(declaration) ->

State 14:
## Known stack suffix:
## LCBR list(declaration)
## LR(1) items:
block -> LCBR list(declaration) . list(instruction) RCBR [ RBRACKET EOF ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 25
-- On IF shift to state 53
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On list(instruction) shift to state 63
-- On instruction shift to state 65
-- On ident shift to state 59
-- On expression shift to state 62
## Reductions:
-- On RCBR
--   reduce production list(instruction) ->

State 15:
## Known stack suffix:
## UMINUS
## LR(1) items:
expression -> UMINUS . expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 25
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On ident shift to state 34
-- On expression shift to state 52
## Reductions:

State 16:
## Known stack suffix:
## THIS
## LR(1) items:
ident -> THIS . DOT ID [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE DOT CSTE ASSIGN ]
## Transitions:
-- On DOT shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## THIS DOT
## LR(1) items:
ident -> THIS DOT . ID [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE DOT CSTE ASSIGN ]
## Transitions:
-- On ID shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## THIS DOT ID
## LR(1) items:
ident -> THIS DOT ID . [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE DOT CSTE ASSIGN ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE DOT CSTE ASSIGN
--   reduce production ident -> THIS DOT ID

State 19:
## Known stack suffix:
## SUPER
## LR(1) items:
ident -> SUPER . DOT ID [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE DOT CSTE ASSIGN ]
## Transitions:
-- On DOT shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## SUPER DOT
## LR(1) items:
ident -> SUPER DOT . ID [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE DOT CSTE ASSIGN ]
## Transitions:
-- On ID shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## SUPER DOT ID
## LR(1) items:
ident -> SUPER DOT ID . [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE DOT CSTE ASSIGN ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE DOT CSTE ASSIGN
--   reduce production ident -> SUPER DOT ID

State 22:
## Known stack suffix:
## NEW
## LR(1) items:
expression -> NEW . ID LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On ID shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## NEW ID
## LR(1) items:
expression -> NEW ID . LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On LPAREN shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## NEW ID LPAREN
## LR(1) items:
expression -> NEW ID LPAREN . list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 25
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On list(expression) shift to state 50
-- On ident shift to state 34
-- On expression shift to state 37
## Reductions:
-- On RPAREN
--   reduce production list(expression) ->

State 25:
## Known stack suffix:
## LPAREN
## LR(1) items:
expression -> LPAREN . ID expression RPAREN [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
expression -> LPAREN . expression RPAREN [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 25
-- On ID shift to state 26
-- On CSTE shift to state 31
-- On ident shift to state 34
-- On expression shift to state 49
## Reductions:

State 26:
## Known stack suffix:
## LPAREN ID
## LR(1) items:
expression -> ID . [ TIMES RPAREN PLUS MINUS ]
expression -> ID . LPAREN list(expression) RPAREN [ TIMES RPAREN PLUS MINUS ]
expression -> LPAREN ID . expression RPAREN [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 27
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On ident shift to state 34
-- On expression shift to state 45
## Reductions:
-- On TIMES RPAREN PLUS MINUS
--   reduce production expression -> ID

State 27:
## Known stack suffix:
## ID LPAREN
## LR(1) items:
expression -> ID LPAREN . list(expression) RPAREN [ UMINUS TIMES THIS SUPER RPAREN PLUS NEW MINUS LPAREN ID CSTE ]
expression -> LPAREN . ID expression RPAREN [ TIMES RPAREN PLUS MINUS ]
expression -> LPAREN . expression RPAREN [ TIMES RPAREN PLUS MINUS ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 25
-- On ID shift to state 28
-- On CSTE shift to state 31
-- On list(expression) shift to state 32
-- On ident shift to state 34
-- On expression shift to state 47
## Reductions:
-- On RPAREN
--   reduce production list(expression) ->

State 28:
## Known stack suffix:
## LPAREN ID
## LR(1) items:
expression -> ID . [ UMINUS TIMES THIS SUPER RPAREN PLUS NEW MINUS LPAREN ID CSTE ]
expression -> ID . LPAREN list(expression) RPAREN [ UMINUS TIMES THIS SUPER RPAREN PLUS NEW MINUS LPAREN ID CSTE ]
expression -> LPAREN ID . expression RPAREN [ TIMES RPAREN PLUS MINUS ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 27
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On ident shift to state 34
-- On expression shift to state 45
## Reductions:
-- On UMINUS TIMES THIS SUPER RPAREN PLUS NEW MINUS LPAREN ID CSTE
--   reduce production expression -> ID
** Conflict on UMINUS THIS SUPER NEW LPAREN ID CSTE

State 29:
## Known stack suffix:
## ID
## LR(1) items:
expression -> ID . [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
expression -> ID . LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On LPAREN shift to state 30
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE
--   reduce production expression -> ID
** Conflict on LPAREN

State 30:
## Known stack suffix:
## ID LPAREN
## LR(1) items:
expression -> ID LPAREN . list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 25
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On list(expression) shift to state 32
-- On ident shift to state 34
-- On expression shift to state 37
## Reductions:
-- On RPAREN
--   reduce production list(expression) ->

State 31:
## Known stack suffix:
## CSTE
## LR(1) items:
expression -> CSTE . [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE
--   reduce production expression -> CSTE

State 32:
## Known stack suffix:
## ID LPAREN list(expression)
## LR(1) items:
expression -> ID LPAREN list(expression) . RPAREN [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On RPAREN shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## ID LPAREN list(expression) RPAREN
## LR(1) items:
expression -> ID LPAREN list(expression) RPAREN . [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE
--   reduce production expression -> ID LPAREN list(expression) RPAREN

State 34:
## Known stack suffix:
## ident
## LR(1) items:
expression -> ident . [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
expression -> ident . DOT ID [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On DOT shift to state 35
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE
--   reduce production expression -> ident

State 35:
## Known stack suffix:
## ident DOT
## LR(1) items:
expression -> ident DOT . ID [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On ID shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## ident DOT ID
## LR(1) items:
expression -> ident DOT ID . [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE
--   reduce production expression -> ident DOT ID

State 37:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS SUPER RPAREN PLUS NEW MINUS LPAREN ID CSTE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS SUPER RPAREN PLUS NEW MINUS LPAREN ID CSTE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS SUPER RPAREN PLUS NEW MINUS LPAREN ID CSTE ]
list(expression) -> expression . list(expression) [ RPAREN ]
## Transitions:
-- On UMINUS shift to state 15
-- On TIMES shift to state 38
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On PLUS shift to state 40
-- On NEW shift to state 22
-- On MINUS shift to state 42
-- On LPAREN shift to state 25
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On list(expression) shift to state 44
-- On ident shift to state 34
-- On expression shift to state 37
## Reductions:
-- On RPAREN
--   reduce production list(expression) ->

State 38:
## Known stack suffix:
## expression TIMES
## LR(1) items:
expression -> expression TIMES . expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 25
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On ident shift to state 34
-- On expression shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## expression TIMES expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
expression -> expression TIMES expression . [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE
--   reduce production expression -> expression TIMES expression

State 40:
## Known stack suffix:
## expression PLUS
## LR(1) items:
expression -> expression PLUS . expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 25
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On ident shift to state 34
-- On expression shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
expression -> expression PLUS expression . [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On TIMES shift to state 38
## Reductions:
-- On UMINUS THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE
--   reduce production expression -> expression PLUS expression

State 42:
## Known stack suffix:
## expression MINUS
## LR(1) items:
expression -> expression MINUS . expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 25
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On ident shift to state 34
-- On expression shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## expression MINUS expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
expression -> expression MINUS expression . [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On TIMES shift to state 38
## Reductions:
-- On UMINUS THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE
--   reduce production expression -> expression MINUS expression

State 44:
## Known stack suffix:
## expression list(expression)
## LR(1) items:
list(expression) -> expression list(expression) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production list(expression) -> expression list(expression)

State 45:
## Known stack suffix:
## LPAREN ID expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS ]
expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS ]
expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS ]
expression -> LPAREN ID expression . RPAREN [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On TIMES shift to state 38
-- On RPAREN shift to state 46
-- On PLUS shift to state 40
-- On MINUS shift to state 42
## Reductions:

State 46:
## Known stack suffix:
## LPAREN ID expression RPAREN
## LR(1) items:
expression -> LPAREN ID expression RPAREN . [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE
--   reduce production expression -> LPAREN ID expression RPAREN

State 47:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS SUPER RPAREN PLUS NEW MINUS LPAREN ID CSTE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS SUPER RPAREN PLUS NEW MINUS LPAREN ID CSTE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS SUPER RPAREN PLUS NEW MINUS LPAREN ID CSTE ]
expression -> LPAREN expression . RPAREN [ TIMES RPAREN PLUS MINUS ]
list(expression) -> expression . list(expression) [ RPAREN ]
## Transitions:
-- On UMINUS shift to state 15
-- On TIMES shift to state 38
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On RPAREN shift to state 48
-- On PLUS shift to state 40
-- On NEW shift to state 22
-- On MINUS shift to state 42
-- On LPAREN shift to state 25
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On list(expression) shift to state 44
-- On ident shift to state 34
-- On expression shift to state 37
## Reductions:
-- On RPAREN
--   reduce production list(expression) ->
** Conflict on RPAREN

State 48:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
expression -> LPAREN expression RPAREN . [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE
--   reduce production expression -> LPAREN expression RPAREN

State 49:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS ]
expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS ]
expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS ]
expression -> LPAREN expression . RPAREN [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On TIMES shift to state 38
-- On RPAREN shift to state 48
-- On PLUS shift to state 40
-- On MINUS shift to state 42
## Reductions:

State 50:
## Known stack suffix:
## NEW ID LPAREN list(expression)
## LR(1) items:
expression -> NEW ID LPAREN list(expression) . RPAREN [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
-- On RPAREN shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## NEW ID LPAREN list(expression) RPAREN
## LR(1) items:
expression -> NEW ID LPAREN list(expression) RPAREN . [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE
--   reduce production expression -> NEW ID LPAREN list(expression) RPAREN

State 52:
## Known stack suffix:
## UMINUS expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
expression -> UMINUS expression . [ UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER RPAREN RCBR PLUS NEW MINUS LPAREN IS IF ID ELSE CSTE
--   reduce production expression -> UMINUS expression

State 53:
## Known stack suffix:
## IF
## LR(1) items:
instruction -> IF . expression THEN instruction ELSE instruction [ UMINUS THIS SUPER RCBR NEW LPAREN IF ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 25
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On ident shift to state 34
-- On expression shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## IF expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES THEN PLUS MINUS ]
expression -> expression . MINUS expression [ TIMES THEN PLUS MINUS ]
expression -> expression . TIMES expression [ TIMES THEN PLUS MINUS ]
instruction -> IF expression . THEN instruction ELSE instruction [ UMINUS THIS SUPER RCBR NEW LPAREN IF ID ELSE CSTE ]
## Transitions:
-- On TIMES shift to state 38
-- On THEN shift to state 55
-- On PLUS shift to state 40
-- On MINUS shift to state 42
## Reductions:

State 55:
## Known stack suffix:
## IF expression THEN
## LR(1) items:
instruction -> IF expression THEN . instruction ELSE instruction [ UMINUS THIS SUPER RCBR NEW LPAREN IF ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 25
-- On IF shift to state 53
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On instruction shift to state 56
-- On ident shift to state 59
-- On expression shift to state 62
## Reductions:

State 56:
## Known stack suffix:
## IF expression THEN instruction
## LR(1) items:
instruction -> IF expression THEN instruction . ELSE instruction [ UMINUS THIS SUPER RCBR NEW LPAREN IF ID ELSE CSTE ]
## Transitions:
-- On ELSE shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## IF expression THEN instruction ELSE
## LR(1) items:
instruction -> IF expression THEN instruction ELSE . instruction [ UMINUS THIS SUPER RCBR NEW LPAREN IF ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 25
-- On IF shift to state 53
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On instruction shift to state 58
-- On ident shift to state 59
-- On expression shift to state 62
## Reductions:

State 58:
## Known stack suffix:
## IF expression THEN instruction ELSE instruction
## LR(1) items:
instruction -> IF expression THEN instruction ELSE instruction . [ UMINUS THIS SUPER RCBR NEW LPAREN IF ID ELSE CSTE ]
## Transitions:
## Reductions:
-- On UMINUS THIS SUPER RCBR NEW LPAREN IF ID ELSE CSTE
--   reduce production instruction -> IF expression THEN instruction ELSE instruction

State 59:
## Known stack suffix:
## ident
## LR(1) items:
expression -> ident . [ UMINUS TIMES THIS SUPER RCBR PLUS NEW MINUS LPAREN IF ID ELSE CSTE ]
expression -> ident . DOT ID [ UMINUS TIMES THIS SUPER RCBR PLUS NEW MINUS LPAREN IF ID ELSE CSTE ]
instruction -> ident . ASSIGN expression [ UMINUS THIS SUPER RCBR NEW LPAREN IF ID ELSE CSTE ]
## Transitions:
-- On DOT shift to state 35
-- On ASSIGN shift to state 60
## Reductions:
-- On UMINUS TIMES THIS SUPER RCBR PLUS NEW MINUS LPAREN IF ID ELSE CSTE
--   reduce production expression -> ident

State 60:
## Known stack suffix:
## ident ASSIGN
## LR(1) items:
instruction -> ident ASSIGN . expression [ UMINUS THIS SUPER RCBR NEW LPAREN IF ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 25
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On ident shift to state 34
-- On expression shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## ident ASSIGN expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS SUPER RCBR PLUS NEW MINUS LPAREN IF ID ELSE CSTE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS SUPER RCBR PLUS NEW MINUS LPAREN IF ID ELSE CSTE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS SUPER RCBR PLUS NEW MINUS LPAREN IF ID ELSE CSTE ]
instruction -> ident ASSIGN expression . [ UMINUS THIS SUPER RCBR NEW LPAREN IF ID ELSE CSTE ]
## Transitions:
-- On TIMES shift to state 38
-- On PLUS shift to state 40
-- On MINUS shift to state 42
## Reductions:
-- On UMINUS THIS SUPER RCBR NEW LPAREN IF ID ELSE CSTE
--   reduce production instruction -> ident ASSIGN expression

State 62:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS SUPER RCBR PLUS NEW MINUS LPAREN IF ID ELSE CSTE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS SUPER RCBR PLUS NEW MINUS LPAREN IF ID ELSE CSTE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS SUPER RCBR PLUS NEW MINUS LPAREN IF ID ELSE CSTE ]
instruction -> expression . [ UMINUS THIS SUPER RCBR NEW LPAREN IF ID ELSE CSTE ]
## Transitions:
-- On TIMES shift to state 38
-- On PLUS shift to state 40
-- On MINUS shift to state 42
## Reductions:
-- On UMINUS THIS SUPER RCBR NEW LPAREN IF ID ELSE CSTE
--   reduce production instruction -> expression

State 63:
## Known stack suffix:
## LCBR list(declaration) list(instruction)
## LR(1) items:
block -> LCBR list(declaration) list(instruction) . RCBR [ RBRACKET EOF ]
## Transitions:
-- On RCBR shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## LCBR list(declaration) list(instruction) RCBR
## LR(1) items:
block -> LCBR list(declaration) list(instruction) RCBR . [ RBRACKET EOF ]
## Transitions:
## Reductions:
-- On RBRACKET EOF
--   reduce production block -> LCBR list(declaration) list(instruction) RCBR

State 65:
## Known stack suffix:
## instruction
## LR(1) items:
list(instruction) -> instruction . list(instruction) [ RCBR ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 25
-- On IF shift to state 53
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On list(instruction) shift to state 66
-- On instruction shift to state 65
-- On ident shift to state 59
-- On expression shift to state 62
## Reductions:
-- On RCBR
--   reduce production list(instruction) ->

State 66:
## Known stack suffix:
## instruction list(instruction)
## LR(1) items:
list(instruction) -> instruction list(instruction) . [ RCBR ]
## Transitions:
## Reductions:
-- On RCBR
--   reduce production list(instruction) -> instruction list(instruction)

State 67:
## Known stack suffix:
## declaration
## LR(1) items:
list(declaration) -> declaration . list(declaration) [ UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF ID CSTE ]
## Transitions:
-- On VAR shift to state 4
-- On list(declaration) shift to state 68
-- On declaration shift to state 67
## Reductions:
-- On UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF ID CSTE
--   reduce production list(declaration) ->

State 68:
## Known stack suffix:
## declaration list(declaration)
## LR(1) items:
list(declaration) -> declaration list(declaration) . [ UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF ID CSTE ]
## Transitions:
## Reductions:
-- On UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF ID CSTE
--   reduce production list(declaration) -> declaration list(declaration)

State 69:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block . RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RBRACKET shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET . IS LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On IS shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS . LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LBRACKET shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET . block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LCBR shift to state 13
-- On block shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block . RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RBRACKET shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block RBRACKET
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block RBRACKET . [ LCBR CLASS ]
## Transitions:
## Reductions:
-- On LCBR CLASS
--   reduce production classe -> CLASS ID LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block RBRACKET

State 75:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN IS
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN IS . LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LBRACKET shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN IS LBRACKET
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN IS LBRACKET . block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LCBR shift to state 13
-- On block shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN IS LBRACKET block
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN IS LBRACKET block . RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RBRACKET shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN IS LBRACKET block RBRACKET
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN IS LBRACKET block RBRACKET . [ LCBR CLASS ]
## Transitions:
## Reductions:
-- On LCBR CLASS
--   reduce production classe -> CLASS ID LPAREN list(declaration) RPAREN IS LBRACKET block RBRACKET

State 79:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN EXTENDS
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS . expression IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS . expression ID LBRACKET block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On UMINUS shift to state 15
-- On THIS shift to state 16
-- On SUPER shift to state 19
-- On NEW shift to state 22
-- On LPAREN shift to state 25
-- On ID shift to state 29
-- On CSTE shift to state 31
-- On ident shift to state 34
-- On expression shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression . IS LBRACKET block RBRACKET [ LCBR CLASS ]
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression . ID LBRACKET block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
expression -> expression . PLUS expression [ TIMES PLUS MINUS IS ID ]
expression -> expression . MINUS expression [ TIMES PLUS MINUS IS ID ]
expression -> expression . TIMES expression [ TIMES PLUS MINUS IS ID ]
## Transitions:
-- On TIMES shift to state 38
-- On PLUS shift to state 40
-- On MINUS shift to state 42
-- On IS shift to state 81
-- On ID shift to state 85
## Reductions:

State 81:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression IS
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression IS . LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LBRACKET shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET . block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LCBR shift to state 13
-- On block shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET block
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET block . RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RBRACKET shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET block RBRACKET
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET block RBRACKET . [ LCBR CLASS ]
## Transitions:
## Reductions:
-- On LCBR CLASS
--   reduce production classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET block RBRACKET

State 85:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID . LBRACKET block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LBRACKET shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET . block RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LCBR shift to state 13
-- On block shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block . RBRACKET IS LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RBRACKET shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET . IS LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On IS shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS . LBRACKET block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LBRACKET shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET . block RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LCBR shift to state 13
-- On block shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block . RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RBRACKET shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block RBRACKET
## LR(1) items:
classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block RBRACKET . [ LCBR CLASS ]
## Transitions:
## Reductions:
-- On LCBR CLASS
--   reduce production classe -> CLASS ID LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block RBRACKET

State 93:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept prog

State 94:
## Known stack suffix:
## list(classe)
## LR(1) items:
prog -> list(classe) . block EOF [ # ]
## Transitions:
-- On LCBR shift to state 13
-- On block shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## list(classe) block
## LR(1) items:
prog -> list(classe) block . EOF [ # ]
## Transitions:
-- On EOF shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## list(classe) block EOF
## LR(1) items:
prog -> list(classe) block EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prog -> list(classe) block EOF

State 97:
## Known stack suffix:
## classe
## LR(1) items:
list(classe) -> classe . list(classe) [ LCBR ]
## Transitions:
-- On CLASS shift to state 1
-- On list(classe) shift to state 98
-- On classe shift to state 97
## Reductions:
-- On LCBR
--   reduce production list(classe) ->

State 98:
## Known stack suffix:
## classe list(classe)
## LR(1) items:
list(classe) -> classe list(classe) . [ LCBR ]
## Transitions:
## Reductions:
-- On LCBR
--   reduce production list(classe) -> classe list(classe)

