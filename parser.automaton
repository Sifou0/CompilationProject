State 0:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On CLASS shift to state 1
-- On prog shift to state 126
-- On list(classe) shift to state 127
-- On classe shift to state 130
## Reductions:
-- On LCBR
--   reduce production list(classe) ->

State 1:
## Known stack suffix:
## CLASS
## LR(1) items:
classe -> CLASS . IDCLASS LPAREN list(declaration) RPAREN IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS . IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS . IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS . IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On IDCLASS shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## CLASS IDCLASS
## LR(1) items:
classe -> CLASS IDCLASS . LPAREN list(declaration) RPAREN IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS IDCLASS . LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS IDCLASS . LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS IDCLASS . LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LPAREN shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## CLASS IDCLASS LPAREN
## LR(1) items:
classe -> CLASS IDCLASS LPAREN . list(declaration) RPAREN IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS IDCLASS LPAREN . list(declaration) RPAREN EXTENDS expression IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS IDCLASS LPAREN . list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS IDCLASS LPAREN . list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On VAR shift to state 4
-- On list(declaration) shift to state 12
-- On declaration shift to state 76
## Reductions:
-- On RPAREN
--   reduce production list(declaration) ->

State 4:
## Known stack suffix:
## VAR
## LR(1) items:
declaration -> VAR . ID COLON ID [ VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF IDCLASS ID DEF CSTE ]
declaration -> VAR . AUTO ID COLON ID [ VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF IDCLASS ID DEF CSTE ]
## Transitions:
-- On ID shift to state 5
-- On AUTO shift to state 8
## Reductions:

State 5:
## Known stack suffix:
## VAR ID
## LR(1) items:
declaration -> VAR ID . COLON ID [ VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF IDCLASS ID DEF CSTE ]
## Transitions:
-- On COLON shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## VAR ID COLON
## LR(1) items:
declaration -> VAR ID COLON . ID [ VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF IDCLASS ID DEF CSTE ]
## Transitions:
-- On ID shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## VAR ID COLON ID
## LR(1) items:
declaration -> VAR ID COLON ID . [ VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF IDCLASS ID DEF CSTE ]
## Transitions:
## Reductions:
-- On VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF IDCLASS ID DEF CSTE
--   reduce production declaration -> VAR ID COLON ID

State 8:
## Known stack suffix:
## VAR AUTO
## LR(1) items:
declaration -> VAR AUTO . ID COLON ID [ VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF IDCLASS ID DEF CSTE ]
## Transitions:
-- On ID shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## VAR AUTO ID
## LR(1) items:
declaration -> VAR AUTO ID . COLON ID [ VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF IDCLASS ID DEF CSTE ]
## Transitions:
-- On COLON shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## VAR AUTO ID COLON
## LR(1) items:
declaration -> VAR AUTO ID COLON . ID [ VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF IDCLASS ID DEF CSTE ]
## Transitions:
-- On ID shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## VAR AUTO ID COLON ID
## LR(1) items:
declaration -> VAR AUTO ID COLON ID . [ VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF IDCLASS ID DEF CSTE ]
## Transitions:
## Reductions:
-- On VAR UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF IDCLASS ID DEF CSTE
--   reduce production declaration -> VAR AUTO ID COLON ID

State 12:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration)
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) . RPAREN IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS IDCLASS LPAREN list(declaration) . RPAREN EXTENDS expression IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS IDCLASS LPAREN list(declaration) . RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS IDCLASS LPAREN list(declaration) . RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RPAREN shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN . IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN . EXTENDS expression IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN . EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN . LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LPAREN shift to state 14
-- On IS shift to state 108
-- On EXTENDS shift to state 112
## Reductions:

State 14:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN . RPAREN LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RPAREN shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN . LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LBRACKET shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET . block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LCBR shift to state 17
-- On block shift to state 78
## Reductions:

State 17:
## Known stack suffix:
## LCBR
## LR(1) items:
block -> LCBR . list(declaration) list(instruction) RCBR [ RCBR RBRACKET EOF DEF ]
## Transitions:
-- On VAR shift to state 4
-- On list(declaration) shift to state 18
-- On declaration shift to state 76
## Reductions:
-- On UMINUS THIS SUPER RCBR NEW LPAREN IF IDCLASS ID CSTE
--   reduce production list(declaration) ->

State 18:
## Known stack suffix:
## LCBR list(declaration)
## LR(1) items:
block -> LCBR list(declaration) . list(instruction) RCBR [ RCBR RBRACKET EOF DEF ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IF shift to state 61
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On list(instruction) shift to state 72
-- On instruction shift to state 74
-- On ident shift to state 67
-- On expression shift to state 70
## Reductions:
-- On RCBR
--   reduce production list(instruction) ->

State 19:
## Known stack suffix:
## UMINUS
## LR(1) items:
expression -> UMINUS . expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On ident shift to state 36
-- On expression shift to state 60
## Reductions:

State 20:
## Known stack suffix:
## THIS
## LR(1) items:
ident -> THIS . DOT ID [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN ]
## Transitions:
-- On DOT shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## THIS DOT
## LR(1) items:
ident -> THIS DOT . ID [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN ]
## Transitions:
-- On ID shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## THIS DOT ID
## LR(1) items:
ident -> THIS DOT ID . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN
--   reduce production ident -> THIS DOT ID

State 23:
## Known stack suffix:
## SUPER
## LR(1) items:
ident -> SUPER . DOT ID [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN ]
## Transitions:
-- On DOT shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## SUPER DOT
## LR(1) items:
ident -> SUPER DOT . ID [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN ]
## Transitions:
-- On ID shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## SUPER DOT ID
## LR(1) items:
ident -> SUPER DOT ID . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DOT DIV CSTE CONCATE ASSIGN
--   reduce production ident -> SUPER DOT ID

State 26:
## Known stack suffix:
## NEW
## LR(1) items:
expression -> NEW . IDCLASS LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On IDCLASS shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## NEW IDCLASS
## LR(1) items:
expression -> NEW IDCLASS . LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On LPAREN shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## NEW IDCLASS LPAREN
## LR(1) items:
expression -> NEW IDCLASS LPAREN . list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On list(expression) shift to state 58
-- On ident shift to state 36
-- On expression shift to state 39
## Reductions:
-- On RPAREN
--   reduce production list(expression) ->

State 29:
## Known stack suffix:
## LPAREN
## LR(1) items:
expression -> LPAREN . ID expression RPAREN [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> LPAREN . expression RPAREN [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IDCLASS shift to state 30
-- On ID shift to state 53
-- On CSTE shift to state 33
-- On ident shift to state 36
-- On expression shift to state 56
## Reductions:

State 30:
## Known stack suffix:
## IDCLASS
## LR(1) items:
expression -> IDCLASS . LPAREN list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On LPAREN shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## IDCLASS LPAREN
## LR(1) items:
expression -> IDCLASS LPAREN . list(expression) RPAREN [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On list(expression) shift to state 34
-- On ident shift to state 36
-- On expression shift to state 39
## Reductions:
-- On RPAREN
--   reduce production list(expression) ->

State 32:
## Known stack suffix:
## ID
## LR(1) items:
expression -> ID . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE
--   reduce production expression -> ID

State 33:
## Known stack suffix:
## CSTE
## LR(1) items:
expression -> CSTE . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE
--   reduce production expression -> CSTE

State 34:
## Known stack suffix:
## IDCLASS LPAREN list(expression)
## LR(1) items:
expression -> IDCLASS LPAREN list(expression) . RPAREN [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On RPAREN shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## IDCLASS LPAREN list(expression) RPAREN
## LR(1) items:
expression -> IDCLASS LPAREN list(expression) RPAREN . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE
--   reduce production expression -> IDCLASS LPAREN list(expression) RPAREN

State 36:
## Known stack suffix:
## ident
## LR(1) items:
expression -> ident . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> ident . DOT ID [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On DOT shift to state 37
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE
--   reduce production expression -> ident

State 37:
## Known stack suffix:
## ident DOT
## LR(1) items:
expression -> ident DOT . ID [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On ID shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## ident DOT ID
## LR(1) items:
expression -> ident DOT ID . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE
--   reduce production expression -> ident DOT ID

State 39:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS SUPER RPAREN RELOP PLUS NEW MINUS LPAREN IDCLASS ID DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS SUPER RPAREN RELOP PLUS NEW MINUS LPAREN IDCLASS ID DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS SUPER RPAREN RELOP PLUS NEW MINUS LPAREN IDCLASS ID DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS SUPER RPAREN RELOP PLUS NEW MINUS LPAREN IDCLASS ID DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS SUPER RPAREN RELOP PLUS NEW MINUS LPAREN IDCLASS ID DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS SUPER RPAREN RELOP PLUS NEW MINUS LPAREN IDCLASS ID DIV CSTE CONCATE ]
list(expression) -> expression . list(expression) [ RPAREN ]
## Transitions:
-- On UMINUS shift to state 19
-- On TIMES shift to state 40
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On RELOP shift to state 42
-- On PLUS shift to state 46
-- On NEW shift to state 26
-- On MINUS shift to state 50
-- On LPAREN shift to state 29
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On DIV shift to state 48
-- On CSTE shift to state 33
-- On CONCATE shift to state 44
-- On list(expression) shift to state 52
-- On ident shift to state 36
-- On expression shift to state 39
## Reductions:
-- On RPAREN
--   reduce production list(expression) ->

State 40:
## Known stack suffix:
## expression TIMES
## LR(1) items:
expression -> expression TIMES . expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On ident shift to state 36
-- On expression shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## expression TIMES expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression TIMES expression . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On RELOP shift to state 42
-- On CONCATE shift to state 44
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE
--   reduce production expression -> expression TIMES expression
** Conflict on CONCATE

State 42:
## Known stack suffix:
## expression RELOP
## LR(1) items:
expression -> expression RELOP . expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On ident shift to state 36
-- On expression shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## expression RELOP expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression RELOP expression . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On CONCATE shift to state 44
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE
--   reduce production expression -> expression RELOP expression
** Conflict on CONCATE

State 44:
## Known stack suffix:
## expression CONCATE
## LR(1) items:
expression -> expression CONCATE . expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On ident shift to state 36
-- On expression shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## expression CONCATE expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression CONCATE expression . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On TIMES shift to state 40
-- On RELOP shift to state 42
-- On PLUS shift to state 46
-- On MINUS shift to state 50
-- On DIV shift to state 48
-- On CONCATE shift to state 44
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE
--   reduce production expression -> expression CONCATE expression
** Conflict on TIMES RELOP PLUS MINUS DIV CONCATE

State 46:
## Known stack suffix:
## expression PLUS
## LR(1) items:
expression -> expression PLUS . expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On ident shift to state 36
-- On expression shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression PLUS expression . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On TIMES shift to state 40
-- On RELOP shift to state 42
-- On DIV shift to state 48
-- On CONCATE shift to state 44
## Reductions:
-- On UMINUS THIS THEN SUPER SEMICOLON RPAREN RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE CSTE CONCATE
--   reduce production expression -> expression PLUS expression
** Conflict on CONCATE

State 48:
## Known stack suffix:
## expression DIV
## LR(1) items:
expression -> expression DIV . expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On ident shift to state 36
-- On expression shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## expression DIV expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression DIV expression . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On RELOP shift to state 42
-- On CONCATE shift to state 44
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE
--   reduce production expression -> expression DIV expression
** Conflict on CONCATE

State 50:
## Known stack suffix:
## expression MINUS
## LR(1) items:
expression -> expression MINUS . expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On ident shift to state 36
-- On expression shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## expression MINUS expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression MINUS expression . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On TIMES shift to state 40
-- On RELOP shift to state 42
-- On DIV shift to state 48
-- On CONCATE shift to state 44
## Reductions:
-- On UMINUS THIS THEN SUPER SEMICOLON RPAREN RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE CSTE CONCATE
--   reduce production expression -> expression MINUS expression
** Conflict on CONCATE

State 52:
## Known stack suffix:
## expression list(expression)
## LR(1) items:
list(expression) -> expression list(expression) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production list(expression) -> expression list(expression)

State 53:
## Known stack suffix:
## LPAREN ID
## LR(1) items:
expression -> ID . [ TIMES RPAREN RELOP PLUS MINUS DIV CONCATE ]
expression -> LPAREN ID . expression RPAREN [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On ident shift to state 36
-- On expression shift to state 54
## Reductions:
-- On TIMES RPAREN RELOP PLUS MINUS DIV CONCATE
--   reduce production expression -> ID

State 54:
## Known stack suffix:
## LPAREN ID expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES RPAREN RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . MINUS expression [ TIMES RPAREN RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . TIMES expression [ TIMES RPAREN RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . DIV expression [ TIMES RPAREN RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . CONCATE expression [ TIMES RPAREN RELOP PLUS MINUS DIV CONCATE ]
expression -> LPAREN ID expression . RPAREN [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ TIMES RPAREN RELOP PLUS MINUS DIV CONCATE ]
## Transitions:
-- On TIMES shift to state 40
-- On RPAREN shift to state 55
-- On RELOP shift to state 42
-- On PLUS shift to state 46
-- On MINUS shift to state 50
-- On DIV shift to state 48
-- On CONCATE shift to state 44
## Reductions:

State 55:
## Known stack suffix:
## LPAREN ID expression RPAREN
## LR(1) items:
expression -> LPAREN ID expression RPAREN . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE
--   reduce production expression -> LPAREN ID expression RPAREN

State 56:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES RPAREN RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . MINUS expression [ TIMES RPAREN RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . TIMES expression [ TIMES RPAREN RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . DIV expression [ TIMES RPAREN RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . CONCATE expression [ TIMES RPAREN RELOP PLUS MINUS DIV CONCATE ]
expression -> LPAREN expression . RPAREN [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ TIMES RPAREN RELOP PLUS MINUS DIV CONCATE ]
## Transitions:
-- On TIMES shift to state 40
-- On RPAREN shift to state 57
-- On RELOP shift to state 42
-- On PLUS shift to state 46
-- On MINUS shift to state 50
-- On DIV shift to state 48
-- On CONCATE shift to state 44
## Reductions:

State 57:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
expression -> LPAREN expression RPAREN . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE
--   reduce production expression -> LPAREN expression RPAREN

State 58:
## Known stack suffix:
## NEW IDCLASS LPAREN list(expression)
## LR(1) items:
expression -> NEW IDCLASS LPAREN list(expression) . RPAREN [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On RPAREN shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## NEW IDCLASS LPAREN list(expression) RPAREN
## LR(1) items:
expression -> NEW IDCLASS LPAREN list(expression) RPAREN . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE
--   reduce production expression -> NEW IDCLASS LPAREN list(expression) RPAREN

State 60:
## Known stack suffix:
## UMINUS expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> UMINUS expression . [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RELOP RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE ]
## Transitions:
-- On RELOP shift to state 42
-- On CONCATE shift to state 44
## Reductions:
-- On UMINUS TIMES THIS THEN SUPER SEMICOLON RPAREN RCBR PLUS NEW MINUS LPAREN IS IF IDCLASS ID ELSE DIV CSTE CONCATE
--   reduce production expression -> UMINUS expression
** Conflict on CONCATE

State 61:
## Known stack suffix:
## IF
## LR(1) items:
instruction -> IF . expression THEN instruction ELSE instruction [ UMINUS THIS SUPER RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On ident shift to state 36
-- On expression shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## IF expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES THEN RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . MINUS expression [ TIMES THEN RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . TIMES expression [ TIMES THEN RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . DIV expression [ TIMES THEN RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . CONCATE expression [ TIMES THEN RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . RELOP expression [ TIMES THEN RELOP PLUS MINUS DIV CONCATE ]
instruction -> IF expression . THEN instruction ELSE instruction [ UMINUS THIS SUPER RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On TIMES shift to state 40
-- On THEN shift to state 63
-- On RELOP shift to state 42
-- On PLUS shift to state 46
-- On MINUS shift to state 50
-- On DIV shift to state 48
-- On CONCATE shift to state 44
## Reductions:

State 63:
## Known stack suffix:
## IF expression THEN
## LR(1) items:
instruction -> IF expression THEN . instruction ELSE instruction [ UMINUS THIS SUPER RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IF shift to state 61
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On instruction shift to state 64
-- On ident shift to state 67
-- On expression shift to state 70
## Reductions:

State 64:
## Known stack suffix:
## IF expression THEN instruction
## LR(1) items:
instruction -> IF expression THEN instruction . ELSE instruction [ UMINUS THIS SUPER RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On ELSE shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## IF expression THEN instruction ELSE
## LR(1) items:
instruction -> IF expression THEN instruction ELSE . instruction [ UMINUS THIS SUPER RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IF shift to state 61
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On instruction shift to state 66
-- On ident shift to state 67
-- On expression shift to state 70
## Reductions:

State 66:
## Known stack suffix:
## IF expression THEN instruction ELSE instruction
## LR(1) items:
instruction -> IF expression THEN instruction ELSE instruction . [ UMINUS THIS SUPER RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
## Reductions:
-- On UMINUS THIS SUPER RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE
--   reduce production instruction -> IF expression THEN instruction ELSE instruction

State 67:
## Known stack suffix:
## ident
## LR(1) items:
expression -> ident . [ TIMES SEMICOLON RELOP PLUS MINUS DIV CONCATE ]
expression -> ident . DOT ID [ TIMES SEMICOLON RELOP PLUS MINUS DIV CONCATE ]
instruction -> ident . ASSIGN expression [ UMINUS THIS SUPER RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On DOT shift to state 37
-- On ASSIGN shift to state 68
## Reductions:
-- On TIMES SEMICOLON RELOP PLUS MINUS DIV CONCATE
--   reduce production expression -> ident

State 68:
## Known stack suffix:
## ident ASSIGN
## LR(1) items:
instruction -> ident ASSIGN . expression [ UMINUS THIS SUPER RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On ident shift to state 36
-- On expression shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## ident ASSIGN expression
## LR(1) items:
expression -> expression . PLUS expression [ UMINUS TIMES THIS SUPER RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . MINUS expression [ UMINUS TIMES THIS SUPER RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . TIMES expression [ UMINUS TIMES THIS SUPER RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . DIV expression [ UMINUS TIMES THIS SUPER RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . CONCATE expression [ UMINUS TIMES THIS SUPER RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DIV CSTE CONCATE ]
expression -> expression . RELOP expression [ UMINUS TIMES THIS SUPER RELOP RCBR PLUS NEW MINUS LPAREN IF IDCLASS ID ELSE DIV CSTE CONCATE ]
instruction -> ident ASSIGN expression . [ UMINUS THIS SUPER RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On TIMES shift to state 40
-- On RELOP shift to state 42
-- On PLUS shift to state 46
-- On MINUS shift to state 50
-- On DIV shift to state 48
-- On CONCATE shift to state 44
## Reductions:
-- On UMINUS THIS SUPER RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE
--   reduce production instruction -> ident ASSIGN expression

State 70:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES SEMICOLON RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . MINUS expression [ TIMES SEMICOLON RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . TIMES expression [ TIMES SEMICOLON RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . DIV expression [ TIMES SEMICOLON RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . CONCATE expression [ TIMES SEMICOLON RELOP PLUS MINUS DIV CONCATE ]
expression -> expression . RELOP expression [ TIMES SEMICOLON RELOP PLUS MINUS DIV CONCATE ]
instruction -> expression . SEMICOLON [ UMINUS THIS SUPER RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
-- On TIMES shift to state 40
-- On SEMICOLON shift to state 71
-- On RELOP shift to state 42
-- On PLUS shift to state 46
-- On MINUS shift to state 50
-- On DIV shift to state 48
-- On CONCATE shift to state 44
## Reductions:

State 71:
## Known stack suffix:
## expression SEMICOLON
## LR(1) items:
instruction -> expression SEMICOLON . [ UMINUS THIS SUPER RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE ]
## Transitions:
## Reductions:
-- On UMINUS THIS SUPER RCBR NEW LPAREN IF IDCLASS ID ELSE CSTE
--   reduce production instruction -> expression SEMICOLON

State 72:
## Known stack suffix:
## LCBR list(declaration) list(instruction)
## LR(1) items:
block -> LCBR list(declaration) list(instruction) . RCBR [ RCBR RBRACKET EOF DEF ]
## Transitions:
-- On RCBR shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## LCBR list(declaration) list(instruction) RCBR
## LR(1) items:
block -> LCBR list(declaration) list(instruction) RCBR . [ RCBR RBRACKET EOF DEF ]
## Transitions:
## Reductions:
-- On RCBR RBRACKET EOF DEF
--   reduce production block -> LCBR list(declaration) list(instruction) RCBR

State 74:
## Known stack suffix:
## instruction
## LR(1) items:
list(instruction) -> instruction . list(instruction) [ RCBR ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IF shift to state 61
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On list(instruction) shift to state 75
-- On instruction shift to state 74
-- On ident shift to state 67
-- On expression shift to state 70
## Reductions:
-- On RCBR
--   reduce production list(instruction) ->

State 75:
## Known stack suffix:
## instruction list(instruction)
## LR(1) items:
list(instruction) -> instruction list(instruction) . [ RCBR ]
## Transitions:
## Reductions:
-- On RCBR
--   reduce production list(instruction) -> instruction list(instruction)

State 76:
## Known stack suffix:
## declaration
## LR(1) items:
list(declaration) -> declaration . list(declaration) [ UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF IDCLASS ID DEF CSTE ]
## Transitions:
-- On VAR shift to state 4
-- On list(declaration) shift to state 77
-- On declaration shift to state 76
## Reductions:
-- On UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF IDCLASS ID DEF CSTE
--   reduce production list(declaration) ->

State 77:
## Known stack suffix:
## declaration list(declaration)
## LR(1) items:
list(declaration) -> declaration list(declaration) . [ UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF IDCLASS ID DEF CSTE ]
## Transitions:
## Reductions:
-- On UMINUS THIS SUPER RPAREN RCBR NEW LPAREN IF IDCLASS ID DEF CSTE
--   reduce production list(declaration) -> declaration list(declaration)

State 78:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block . RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RBRACKET shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET . IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On IS shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS . LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LBRACKET shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET . block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LCBR shift to state 82
-- On block_class shift to state 106
## Reductions:

State 82:
## Known stack suffix:
## LCBR
## LR(1) items:
block_class -> LCBR . list(declaration) list(methode) RCBR [ RBRACKET ]
## Transitions:
-- On VAR shift to state 4
-- On list(declaration) shift to state 83
-- On declaration shift to state 76
## Reductions:
-- On RCBR DEF
--   reduce production list(declaration) ->

State 83:
## Known stack suffix:
## LCBR list(declaration)
## LR(1) items:
block_class -> LCBR list(declaration) . list(methode) RCBR [ RBRACKET ]
## Transitions:
-- On DEF shift to state 84
-- On methode shift to state 102
-- On list(methode) shift to state 104
## Reductions:
-- On RCBR
--   reduce production list(methode) ->

State 84:
## Known stack suffix:
## DEF
## LR(1) items:
methode -> DEF . ID LPAREN list(declaration) RPAREN COLON IDCLASS block [ RCBR DEF ]
methode -> DEF . ID LPAREN list(declaration) RPAREN block [ RCBR DEF ]
methode -> DEF . OVERRIDE ID LPAREN list(declaration) RPAREN block [ RCBR DEF ]
methode -> DEF . OVERRIDE ID LPAREN list(declaration) RPAREN COLON IDCLASS block [ RCBR DEF ]
## Transitions:
-- On OVERRIDE shift to state 85
-- On ID shift to state 94
## Reductions:

State 85:
## Known stack suffix:
## DEF OVERRIDE
## LR(1) items:
methode -> DEF OVERRIDE . ID LPAREN list(declaration) RPAREN block [ RCBR DEF ]
methode -> DEF OVERRIDE . ID LPAREN list(declaration) RPAREN COLON IDCLASS block [ RCBR DEF ]
## Transitions:
-- On ID shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## DEF OVERRIDE ID
## LR(1) items:
methode -> DEF OVERRIDE ID . LPAREN list(declaration) RPAREN block [ RCBR DEF ]
methode -> DEF OVERRIDE ID . LPAREN list(declaration) RPAREN COLON IDCLASS block [ RCBR DEF ]
## Transitions:
-- On LPAREN shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN
## LR(1) items:
methode -> DEF OVERRIDE ID LPAREN . list(declaration) RPAREN block [ RCBR DEF ]
methode -> DEF OVERRIDE ID LPAREN . list(declaration) RPAREN COLON IDCLASS block [ RCBR DEF ]
## Transitions:
-- On VAR shift to state 4
-- On list(declaration) shift to state 88
-- On declaration shift to state 76
## Reductions:
-- On RPAREN
--   reduce production list(declaration) ->

State 88:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN list(declaration)
## LR(1) items:
methode -> DEF OVERRIDE ID LPAREN list(declaration) . RPAREN block [ RCBR DEF ]
methode -> DEF OVERRIDE ID LPAREN list(declaration) . RPAREN COLON IDCLASS block [ RCBR DEF ]
## Transitions:
-- On RPAREN shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN list(declaration) RPAREN
## LR(1) items:
methode -> DEF OVERRIDE ID LPAREN list(declaration) RPAREN . block [ RCBR DEF ]
methode -> DEF OVERRIDE ID LPAREN list(declaration) RPAREN . COLON IDCLASS block [ RCBR DEF ]
## Transitions:
-- On LCBR shift to state 17
-- On COLON shift to state 90
-- On block shift to state 93
## Reductions:

State 90:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN list(declaration) RPAREN COLON
## LR(1) items:
methode -> DEF OVERRIDE ID LPAREN list(declaration) RPAREN COLON . IDCLASS block [ RCBR DEF ]
## Transitions:
-- On IDCLASS shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN list(declaration) RPAREN COLON IDCLASS
## LR(1) items:
methode -> DEF OVERRIDE ID LPAREN list(declaration) RPAREN COLON IDCLASS . block [ RCBR DEF ]
## Transitions:
-- On LCBR shift to state 17
-- On block shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN list(declaration) RPAREN COLON IDCLASS block
## LR(1) items:
methode -> DEF OVERRIDE ID LPAREN list(declaration) RPAREN COLON IDCLASS block . [ RCBR DEF ]
## Transitions:
## Reductions:
-- On RCBR DEF
--   reduce production methode -> DEF OVERRIDE ID LPAREN list(declaration) RPAREN COLON IDCLASS block

State 93:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN list(declaration) RPAREN block
## LR(1) items:
methode -> DEF OVERRIDE ID LPAREN list(declaration) RPAREN block . [ RCBR DEF ]
## Transitions:
## Reductions:
-- On RCBR DEF
--   reduce production methode -> DEF OVERRIDE ID LPAREN list(declaration) RPAREN block

State 94:
## Known stack suffix:
## DEF ID
## LR(1) items:
methode -> DEF ID . LPAREN list(declaration) RPAREN COLON IDCLASS block [ RCBR DEF ]
methode -> DEF ID . LPAREN list(declaration) RPAREN block [ RCBR DEF ]
## Transitions:
-- On LPAREN shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## DEF ID LPAREN
## LR(1) items:
methode -> DEF ID LPAREN . list(declaration) RPAREN COLON IDCLASS block [ RCBR DEF ]
methode -> DEF ID LPAREN . list(declaration) RPAREN block [ RCBR DEF ]
## Transitions:
-- On VAR shift to state 4
-- On list(declaration) shift to state 96
-- On declaration shift to state 76
## Reductions:
-- On RPAREN
--   reduce production list(declaration) ->

State 96:
## Known stack suffix:
## DEF ID LPAREN list(declaration)
## LR(1) items:
methode -> DEF ID LPAREN list(declaration) . RPAREN COLON IDCLASS block [ RCBR DEF ]
methode -> DEF ID LPAREN list(declaration) . RPAREN block [ RCBR DEF ]
## Transitions:
-- On RPAREN shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## DEF ID LPAREN list(declaration) RPAREN
## LR(1) items:
methode -> DEF ID LPAREN list(declaration) RPAREN . COLON IDCLASS block [ RCBR DEF ]
methode -> DEF ID LPAREN list(declaration) RPAREN . block [ RCBR DEF ]
## Transitions:
-- On LCBR shift to state 17
-- On COLON shift to state 98
-- On block shift to state 101
## Reductions:

State 98:
## Known stack suffix:
## DEF ID LPAREN list(declaration) RPAREN COLON
## LR(1) items:
methode -> DEF ID LPAREN list(declaration) RPAREN COLON . IDCLASS block [ RCBR DEF ]
## Transitions:
-- On IDCLASS shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## DEF ID LPAREN list(declaration) RPAREN COLON IDCLASS
## LR(1) items:
methode -> DEF ID LPAREN list(declaration) RPAREN COLON IDCLASS . block [ RCBR DEF ]
## Transitions:
-- On LCBR shift to state 17
-- On block shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## DEF ID LPAREN list(declaration) RPAREN COLON IDCLASS block
## LR(1) items:
methode -> DEF ID LPAREN list(declaration) RPAREN COLON IDCLASS block . [ RCBR DEF ]
## Transitions:
## Reductions:
-- On RCBR DEF
--   reduce production methode -> DEF ID LPAREN list(declaration) RPAREN COLON IDCLASS block

State 101:
## Known stack suffix:
## DEF ID LPAREN list(declaration) RPAREN block
## LR(1) items:
methode -> DEF ID LPAREN list(declaration) RPAREN block . [ RCBR DEF ]
## Transitions:
## Reductions:
-- On RCBR DEF
--   reduce production methode -> DEF ID LPAREN list(declaration) RPAREN block

State 102:
## Known stack suffix:
## methode
## LR(1) items:
list(methode) -> methode . list(methode) [ RCBR ]
## Transitions:
-- On DEF shift to state 84
-- On methode shift to state 102
-- On list(methode) shift to state 103
## Reductions:
-- On RCBR
--   reduce production list(methode) ->

State 103:
## Known stack suffix:
## methode list(methode)
## LR(1) items:
list(methode) -> methode list(methode) . [ RCBR ]
## Transitions:
## Reductions:
-- On RCBR
--   reduce production list(methode) -> methode list(methode)

State 104:
## Known stack suffix:
## LCBR list(declaration) list(methode)
## LR(1) items:
block_class -> LCBR list(declaration) list(methode) . RCBR [ RBRACKET ]
## Transitions:
-- On RCBR shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## LCBR list(declaration) list(methode) RCBR
## LR(1) items:
block_class -> LCBR list(declaration) list(methode) RCBR . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production block_class -> LCBR list(declaration) list(methode) RCBR

State 106:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block_class
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block_class . RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RBRACKET shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET . [ LCBR CLASS ]
## Transitions:
## Reductions:
-- On LCBR CLASS
--   reduce production classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN LPAREN RPAREN LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET

State 108:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN IS
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN IS . LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LBRACKET shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN IS LBRACKET
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN IS LBRACKET . block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LCBR shift to state 82
-- On block_class shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN IS LBRACKET block_class
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN IS LBRACKET block_class . RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RBRACKET shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN IS LBRACKET block_class RBRACKET
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN IS LBRACKET block_class RBRACKET . [ LCBR CLASS ]
## Transitions:
## Reductions:
-- On LCBR CLASS
--   reduce production classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN IS LBRACKET block_class RBRACKET

State 112:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS . expression IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS . expression ID LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On UMINUS shift to state 19
-- On THIS shift to state 20
-- On SUPER shift to state 23
-- On NEW shift to state 26
-- On LPAREN shift to state 29
-- On IDCLASS shift to state 30
-- On ID shift to state 32
-- On CSTE shift to state 33
-- On ident shift to state 36
-- On expression shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression . IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression . ID LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
expression -> expression . PLUS expression [ TIMES RELOP PLUS MINUS IS ID DIV CONCATE ]
expression -> expression . MINUS expression [ TIMES RELOP PLUS MINUS IS ID DIV CONCATE ]
expression -> expression . TIMES expression [ TIMES RELOP PLUS MINUS IS ID DIV CONCATE ]
expression -> expression . DIV expression [ TIMES RELOP PLUS MINUS IS ID DIV CONCATE ]
expression -> expression . CONCATE expression [ TIMES RELOP PLUS MINUS IS ID DIV CONCATE ]
expression -> expression . RELOP expression [ TIMES RELOP PLUS MINUS IS ID DIV CONCATE ]
## Transitions:
-- On TIMES shift to state 40
-- On RELOP shift to state 42
-- On PLUS shift to state 46
-- On MINUS shift to state 50
-- On IS shift to state 114
-- On ID shift to state 118
-- On DIV shift to state 48
-- On CONCATE shift to state 44
## Reductions:

State 114:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression IS
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression IS . LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LBRACKET shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET . block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LCBR shift to state 82
-- On block_class shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET block_class
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET block_class . RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RBRACKET shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET block_class RBRACKET
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET block_class RBRACKET . [ LCBR CLASS ]
## Transitions:
## Reductions:
-- On LCBR CLASS
--   reduce production classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression IS LBRACKET block_class RBRACKET

State 118:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID . LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LBRACKET shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET . block RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LCBR shift to state 17
-- On block shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block . RBRACKET IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RBRACKET shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET . IS LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On IS shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS . LBRACKET block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LBRACKET shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET . block_class RBRACKET [ LCBR CLASS ]
## Transitions:
-- On LCBR shift to state 82
-- On block_class shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block_class
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block_class . RBRACKET [ LCBR CLASS ]
## Transitions:
-- On RBRACKET shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET
## LR(1) items:
classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET . [ LCBR CLASS ]
## Transitions:
## Reductions:
-- On LCBR CLASS
--   reduce production classe -> CLASS IDCLASS LPAREN list(declaration) RPAREN EXTENDS expression ID LBRACKET block RBRACKET IS LBRACKET block_class RBRACKET

State 126:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept prog

State 127:
## Known stack suffix:
## list(classe)
## LR(1) items:
prog -> list(classe) . block EOF [ # ]
## Transitions:
-- On LCBR shift to state 17
-- On block shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## list(classe) block
## LR(1) items:
prog -> list(classe) block . EOF [ # ]
## Transitions:
-- On EOF shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## list(classe) block EOF
## LR(1) items:
prog -> list(classe) block EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prog -> list(classe) block EOF

State 130:
## Known stack suffix:
## classe
## LR(1) items:
list(classe) -> classe . list(classe) [ LCBR ]
## Transitions:
-- On CLASS shift to state 1
-- On list(classe) shift to state 131
-- On classe shift to state 130
## Reductions:
-- On LCBR
--   reduce production list(classe) ->

State 131:
## Known stack suffix:
## classe list(classe)
## LR(1) items:
list(classe) -> classe list(classe) . [ LCBR ]
## Transitions:
## Reductions:
-- On LCBR
--   reduce production list(classe) -> classe list(classe)

